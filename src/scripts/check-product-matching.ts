import { db } from '../lib/db'

async function checkProductMatching() {
  // Get sample products from each category
  const categories = ['pasta', 'meat', 'vegetables', 'dairy', 'pantry']
  console.log('üì¶ SAMPLE PRODUCTS IN DATABASE:\n')

  for (const category of categories) {
    const products = await db.migrosProduct.findMany({
      where: { category },
      take: 5,
      orderBy: { name: 'asc' }
    })
    
    console.log(`\nüè∑Ô∏è  ${category.toUpperCase()} (${products.length} samples):`)
    products.forEach(p => {
      console.log(`  - ${p.name} ${p.brand ? '(' + p.brand + ')' : ''} - CHF ${p.priceChf}`)
    })
  }

  // Get total counts
  const totals = await db.migrosProduct.groupBy({
    by: ['category'],
    _count: true
  })

  console.log('\nüìä TOTAL PRODUCTS BY CATEGORY:')
  totals.forEach(t => {
    console.log(`  ${t.category || 'uncategorized'}: ${t._count} products`)
  })

  // Test some common ingredient matching scenarios
  console.log('\nüî¨ TESTING INGREDIENT MATCHING:\n')
  
  const testIngredients = [
    '200g de p√¢tes',
    '4 tomates fra√Æches',
    '500g de b≈ìuf hach√©',
    '2 oignons',
    '3 gousses d\'ail',
    '200ml de cr√®me fra√Æche',
    '100g de fromage r√¢p√©',
    '1 litre de lait',
    '6 ≈ìufs',
    'huile d\'olive'
  ]

  const { analyzeIngredient, findBestProductMatch } = await import('../lib/enhanced-product-matching')

  for (const ingredient of testIngredients) {
    const analysis = analyzeIngredient(ingredient)
    const matches = await findBestProductMatch(analysis, { preferScrapingBee: true })
    
    console.log(`\nüìù "${ingredient}"`)
    console.log(`   ‚Üí Main: "${analysis.mainIngredient}" (${analysis.category})`)
    
    if (matches.length > 0) {
      const best = matches[0]
      console.log(`   ‚úÖ Match: "${best.name}" - CHF ${best.priceChf}`)
      console.log(`      Score: ${Math.round(best.matchScore * 100)}% (${best.confidence})`)
      console.log(`      Reason: ${best.matchReason}`)
    } else {
      console.log(`   ‚ùå NO MATCH FOUND`)
    }
  }

  await db.$disconnect()
}

checkProductMatching().catch(console.error)